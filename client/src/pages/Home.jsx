import React, { useState, useEffect } from 'react';
import FormField from '../components/FormField';
import Loader from '../components/Loader';
import Card from '../components/Card';

const RenderCards = ({ data, title }) => {
    if (data?.length > 0) {
        return (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5">
                {data.map((post) => (
                    <Card key={post._id} {...post} />
                ))}
            </div>
        );
    }
    return <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>;
};

export default function Home() {
    const [loading, setLoading] = useState(false);
    const [searchText, setSearchText] = useState("");
    const [searchedResults, setSearchedResults] = useState(null);
    const [searchTimeout, setSearchTimeout] = useState(null);
    const [allPosts, setAllPosts] = useState(null);

    useEffect(() => {
        const fetchPosts = async () => {
            setLoading(true);
            try {
                const response = await fetch('http://localhost:8080/api/v1/post');
                const result = await response.json();
                if (response.ok) {
                    setAllPosts(result.data);
                } else {
                    console.error('Error fetching posts:', result.message);
                }
            } catch (err) {
                console.error('Error fetching posts:', err);
            } finally {
                setLoading(false);
            }
        };
        fetchPosts();
    }, []);

    const handleSearchChange = (event) => {
        clearTimeout(searchTimeout);
        setSearchText(event.target.value);

        setSearchTimeout(setTimeout(() => {
            const searchResult = allPosts.filter(
                (item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || 
                item.prompt.toLowerCase().includes(searchText.toLowerCase())
            );
            setSearchedResults(searchResult);
        }, 500));
    };

    return (
        <div className="ml-5 mr-5">
            <div className="font-extrabold text-xl pt-5 pb-5">The Community Showcase</div>
            <div className="text-gray-400 mb-5">Browse through some stunning photos generated by the Slim-AI</div>
            <FormField
                labelName="Search posts"
                type="text"
                name="text"
                placeholder="Search something..."
                value={searchText}
                handleChange={handleSearchChange}
            />
            <div className="">
                {loading ? (
                    <div className="flex justify-center p-32">
                        <Loader />
                    </div>
                ) : (
                    <>
                        {searchText && (
                            <div>
                                <div className="mt-3 text-gray-400">Showing results for {searchText}</div>
                            </div>
                        )}
                        <RenderCards
                            data={searchText ? searchedResults : allPosts}
                            title={searchText ? "No Search Results Found" : "No Posts Yet"}
                        />
                    </>
                )}
            </div>
        </div>
    );
}
